buildscript {
    ext {
        projectName = 'walking-be'
        projectVersion = '1.0.0'
        springBootVersion = '2.7.5'
        dependencyManagementVersion = '1.0.15.RELEASE'

        // jwt
        jsonwebtokenVersion = '0.11.5'

        // jsr
        jsr305Version = '3.0.1'

        // swagger & restdocs
        asciidoctorVersion = '3.3.2'
        epagesRestDocsApiSpecVersion = '0.16.0'
        hidetakeSwaggerGeneratorVersion = '2.18.2'
        springDocOpenApiUiVersion = '1.6.9'
        swaggerUIVersion = '4.1.3'
        // spotless
        spotlessVersion = '6.8.0'

        // spring cloud
        set('springCloudVersion', "2021.0.1")
    }
}


plugins {
    id 'java'

    // spring
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"

    // code quality
    id "com.diffplug.spotless" version "${spotlessVersion}"

    // docs generation
    id 'org.asciidoctor.jvm.convert' version "${asciidoctorVersion}"
    id 'com.epages.restdocs-api-spec' version "${epagesRestDocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version "${hidetakeSwaggerGeneratorVersion}"

    // test coverage
    id 'jacoco'
}

group = 'com.walking'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java'

    implementation 'org.hibernate:hibernate-envers'

    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'javax.annotation:javax.annotation-api'

    annotationProcessor("javax.persistence:javax.persistence-api")

    // jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: "${jsr305Version}"

    //jwt
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"

    // apache commons
    implementation 'org.apache.commons:commons-lang3:3.0'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    dependsOn spotlessApply

    useJUnitPlatform()

    testLogging {
        events "failed"
        exceptionFormat "full"
    }

    finalizedBy jacocoTestReport
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        googleJavaFormat('1.12.0')
        indentWithTabs(2)
        endWithNewline()
        target 'src/*/java/**/*.java'
    }

    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        targetExclude '.release/*.*'
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.create(name: 'gitExecutableHooks') {
    Runtime.getRuntime().exec("chmod -R +x .git/hooks/");
}

task installGitHooks(type: Copy) {
    String scriptDir = rootProject.rootDir.toString() + '/scripts/commit'
    from new File(scriptDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
}

gitExecutableHooks.dependsOn installGitHooks
clean.dependsOn gitExecutableHooks

task setGitCommitTemplate() {
    Runtime.getRuntime().exec("git config commit.template " + rootProject.rootDir.toString() + "/resources/commit/git-commit-template.txt");
}
